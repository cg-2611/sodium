#ifndef SODIUM_NAC_LEXER_LEXER_DIAGNOSTICS_H
#define SODIUM_NAC_LEXER_LEXER_DIAGNOSTICS_H

#include <string>
#include <string_view>

#include "sodium/nac/diagnostics/error.h"

namespace sodium {

class Token;

/// An enum of the kinds of lexer errors that can be generated by the Sodium compiler lexer.
enum class LexerErrorKind {
    UNRECOGNISED_TOKEN
};

/// Derived class of Error, used to represent an error that is diagnosed by the lexer.
class LexerError : public Error {
public:
    /// Constructor for LexerError.
    /// Forms the error message that describes the lexer error.
    /// \param kind The kind of the lexer error.
    /// \param token The token that has caused the error.
    LexerError(LexerErrorKind kind, const Token &token);

    /// \return The kind of \c this lexer error.
    [[nodiscard]] LexerErrorKind kind() const;

    /// \return The message that describes \c this lexer error.
    [[nodiscard]] const std::string &message() const override;

    /// Generate a description of a LexerErrorKind.
    /// \param kind The kind of lexer error to generate the description for.
    /// \return The description of the given lexer error.
    static constexpr std::string_view description_from_kind(LexerErrorKind kind);

private:
    LexerErrorKind kind_;
    std::string message_;
};

} // namespace sodium

#endif // SODIUM_NAC_LEXER_LEXER_DIAGNOSTICS_H
