#ifndef SODIUM_NAC_LEXER_TOKEN_H
#define SODIUM_NAC_LEXER_TOKEN_H

#include <set>
#include <string>

namespace sodium::nac {

/**
 * An enum of the different kinds of tokens currently used in sodium.
*/
enum class TokenKind {
    TOKEN_EOF,
    TOKEN_KEYWORD,
    TOKEN_TYPE,
    TOKEN_IDENTIFIER,
    TOKEN_NUMERIC_LITERAL,
    TOKEN_COLON,
    TOKEN_LEFT_BRACE,
    TOKEN_LEFT_PAREN,
    TOKEN_RIGHT_BRACE,
    TOKEN_RIGHT_PAREN,
    TOKEN_SEMI_COLON
};

/**
 * This class is used to represent a token.
*/
class Token {
public:
    /// An std::set of the keywords (as strings) currently used in sodium
    static const std::set<std::string> KEYWORDS;
    /// An std::set of the types (as strings) currently used in sodium
    static const std::set<std::string> TYPES;

    /**
     * Constructor for a token.
     * @param tokenKind the kind of token being constructed, must be one of sodium::nac::TokenKind.
     * @param tokenValue the value of the token as a string.
    */
    Token(TokenKind tokenKind, const std::string tokenValue);

    /**
     * Destructor for Token.
    */
    ~Token() {};

    /**
     * @return The kind of this token.
    */
    TokenKind getKind() const;

    /**
     * @return The kind of this token as a string. The string will match the
     * corresponding sodium::nac::TokenKind enum identifier.
    */
    const std::string getKindAsString() const;

    /**
     * @return The value of this token as a string.
    */
    const std::string getValue() const;

    /**
     * @return An std:shared_ptr<Token> pointer to the next token in the sequence of tokens
     * generated by the lexer.
    */
    const std::shared_ptr<Token> getNext() const;

    /**
     * Sets the next token in the sequence of tokens.
     * @param nextToken an std::shared_ptr<Token> pointer to the new next token.
    */
    void setNext(std::shared_ptr<Token> nextToken);

private:
    TokenKind kind_;
    std::string value_;
    std::shared_ptr<Token> next_;
};

} // namespace sodium::nac

#endif // SODIUM_NAC_LEXER_TOKEN_H
